@page "/livetracking"
@using Application.Common.Models.SignalR;
@using Microsoft.AspNetCore.SignalR.Client;
@inject HttpClient Http


<div class="row">
    <div class="col-lg-6 col-md-12 col-sm-12">
        <div class="fakeMenu">
            <div class="text-start w-25 d-inline-block">
                <span class="fakeButtons fakeClose"></span>
                <span class="fakeButtons fakeMinimize"></span>
                <span class="fakeButtons fakeZoom"></span>
            </div>
            <div class="d-inline-block w-50 text-center Lexend-400">
                <h5 class="d-inline-block pt-1">T-BOT Actions</h5>
            </div>
        </div>
        <div class="fakeScreen">
            @foreach (var log in logs)
            {
                <p class="line1">@log.Message <span class="inline-line">@log.SendOn.ToString("g")</span></p>
            }

        </div>
    </div>
    <div class="col-lg-6 col-md-12 col-sm-12">
        <div class="fakeMenu">
            <div class="text-start w-25 d-inline-block">
                <span class="fakeButtons fakeClose"></span>
                <span class="fakeButtons fakeMinimize"></span>
                <span class="fakeButtons fakeZoom"></span>
            </div>
            <div class="d-inline-block w-50 text-center Lexend-400">
                <h5 class="d-inline-block pt-1">Product Details</h5>
            </div>
        </div>
        <div class="fakeScreen">
            @foreach(var detail in details)
            {
                
                <p class="line2">Product Name:<span class="inline-line">@detail.product_Name</span></p>
                <p class="line2">Store Name:<span class="inline-line">@detail.product_StoreName</span></p>
                <p class="line2">Product Price:<span class="inline-line">@detail.product_Price</span></p>
                <p class="line2" style="width:100%">Image URL:<span class="inline-line" style="word-wrap:anywhere;">@detail.product_imageURL</span></p>
                
                <hr style="color:#16FF00" />
                 
                
            }
            
        </div>

    </div>
</div>





@code {

    private List<UserLogDto> logs = new List<UserLogDto>();
    private List<FormattedLogDto> details = new List<FormattedLogDto>();

    protected override async Task OnInitializedAsync()
    {
        var userLogHub = new HubConnectionBuilder()
       .WithUrl($"https://localhost:7090/Hubs/UserLogHub")
       .WithAutomaticReconnect()
       .Build();
        Console.WriteLine("Hub started");
        userLogHub.On<UserLogDto>("NewUserLogAdded", (UserLogDto) =>
         {
             logs.Add(UserLogDto);

             InvokeAsync(StateHasChanged);
         });

        userLogHub.On<FormattedLogDto>("OrderDetailsAdded", (FormattedLogDto) =>
     {
         details.Add(FormattedLogDto);

         InvokeAsync(StateHasChanged);
     });

        await userLogHub.StartAsync();

        await base.OnInitializedAsync();
    }

}

<style>
    .fakeButtons {
        height: 10px;
        width: 10px;
        border-radius: 50%;
        border: 1px solid #000;
        position: relative;
        top: 1px;
        left: 6px;
        background-color: #ff3b47;
        border-color: #9d252b;
        display: inline-block;
    }

    .fakeMinimize {
        left: 11px;
        background-color: #ffc100;
        border-color: #9d802c;
    }

    .fakeZoom {
        left: 16px;
        background-color: #00d742;
        border-color: #049931;
    }

    .fakeMenu {
        /* width: 75%; */
        box-sizing: border-box;
        height: 35px;
        background-color: #bbb;
        margin: 0 auto;
        border-top-right-radius: 5px;
        border-top-left-radius: 5px;
    }

    .fakeScreen {
        background-color: #16213E;
        box-sizing: border-box;
        height: 90vh;
/*         width:100%; */
        margin: 0 auto;
        margin-bottom: 15px;
        padding: 20px;
        opacity: 0.8;
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
        overflow-y: auto;
        overflow-x:clip;
        overflow-wrap:anywhere;
    }

    .line1 {
        /* position: static; */
        color: #FFFF00;
        text-align: left;
        font-size: 1.25em;
        font-family: monospace;
        overflow:hidden;
    }

    .line2 {
        /* position: static; */
        color: #16FF00;
        text-align: left;
        font-size: 1.25em;
        font-family: monospace;
        /* overflow: hidden; */
    }

    .inline-line {
        color: #fff;
        font-weight: bold;
        overflow:hidden;
    }

    .Lexend-400 {
        font-family: 'Lexend', sans-serif;
        font-weight: 400;
    }
</style>