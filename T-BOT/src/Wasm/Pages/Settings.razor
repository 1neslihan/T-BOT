@page "/settings"
@using Application.Features.Users.Commands.UpdateNotifications;
@using Application.Features.Users.Queries.GetNotifications;
@using System.Net.Http.Headers;
@inject HttpClient httpClient


<div class="border border-bottom-0 rounded-top w-75 navyBlue p-2 mx-auto mt-2 Lexend-400">
    <h4 class="ms-4">Notifications</h4>
</div>
<div class="border rounded-bottom w-75 p-2 bg-white mx-auto Lexend-400">
    <div class="form-check mb-3">
        <p class="mt-3">
            If you want to e-mail notification with order details when an
            order completed. Please enable e-mail notification.
        </p>
        <input class="form-check-input ms-1" type="checkbox" @bind="EmailNotifications" value="" id="Email-Notification">
        <label class="form-check-label ms-1" for="Email-Notification">
            Enable E-mail Notification
        </label>
    </div>
    <div class="form-check mb-4">
        <p>
            If you want to be informed order completed and generated when
            you wandering in application enable toaster notification
        </p>
        <input class="form-check-input ms-1" type="checkbox" @bind="ToasterNotifications" value="" id="Toaster-Notification">
        <label class="form-check-label ms-1" for="Toaster-Notification">
            Enable Toaster Notification
        </label>
    </div>
    <div class="text-center mb-3">
        <button type="button" class="btn navyBlue mx-auto" @onclick="SaveChanges">Save Changes</button>
    </div>
</div>




@code {

    private const string BASE_URL = "https://localhost:7090/api";
    private bool EmailNotifications;
    private bool ToasterNotifications;
    string token = "";

    protected override async Task OnInitializedAsync()
    {
        token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        await LoadUserSettingsAsync();
        await base.OnInitializedAsync();

    }

    private async Task LoadUserSettingsAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await httpClient.GetFromJsonAsync<GetNotificationsDto>($"{BASE_URL}/Users/GetUserPreferences");

        EmailNotifications = response.EmailNotificationEnable;
        ToasterNotifications = response.ToasterNotificationEnable;
        Console.WriteLine("api çağrısı yapıldı");
    }

    private async Task SaveChanges()
    {
        var updateNotificationsCommandRequest = new UpdateNotificationsCommand
            {
                EmailNotificationsEnable=EmailNotifications,
                ToasterNotificationsEnable=ToasterNotifications
            };

        var updateNotificationsCommandResponse = await httpClient.PutAsJsonAsync($"{BASE_URL}/Users", updateNotificationsCommandRequest);
        StateHasChanged();
    }

}

<style>
    .Lexend-400 {
        font-family: 'Lexend', sans-serif;
        font-weight: 400;
    }

    .navyBlue {
        background-color: #001C30;
        color: #f9fafb;
    }

        .navyBlue:hover {
            opacity: 0.85;
            color: white;
        }
</style>