@page "/"
@using Application.Common.Models.General;
@using Application.Features.Orders.Commands.HardDelete;
@using Application.Features.Orders.Commands.SoftDelete;
@using Application.Features.Orders.Commands.UndoDelete;
@using Application.Features.Orders.Queries.GetAll;
@using Application.Features.Products.Queries.GetAll;
@using Application.Features.Users.Queries.GetNotifications;
@using ClosedXML.Excel;
@using Domain.Common;
@using Domain.Entities;
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http.Headers;
@using Newtonsoft.Json.Linq;
@using System.Threading.Tasks
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<PageTitle>Index</PageTitle>


<div>
    <h2 class="Lexend-400">Hi, there</h2>
</div>
<hr />
<div class="row justify-content-between mx-0 border rounded" style="background-color:white; border-color:#C3C4C6">
    <div class="col-sm-12 col-md-12 col-lg-4 mb-4 mt-4 px-3">
        <div class="p-3" style="background-color:#8BA8FF; border:solid; border-width:1px; border-color:transparent; border-radius:7px;">
            <div class="text-center">
                <div>
                    <svg xmlns="http://www.w3.org/2000/svg" width="3rem" height="3rem" viewBox="0 0 24 24"><path fill="#002FBA" d="M20.756 5.345A1.003 1.003 0 0 0 20 5H6.181l-.195-1.164A1 1 0 0 0 5 3H2.75a1 1 0 1 0 0 2h1.403l1.86 11.164l.045.124l.054.151l.12.179l.095.112l.193.13l.112.065a.97.97 0 0 0 .367.075H18a1 1 0 1 0 0-2H7.847l-.166-1H19a1 1 0 0 0 .99-.858l1-7a1.002 1.002 0 0 0-.234-.797zM18.847 7l-.285 2H15V7h3.847zM14 7v2h-3V7h3zm0 3v2h-3v-2h3zm-4-3v2H7l-.148.03L6.514 7H10zm-2.986 3H10v2H7.347l-.333-2zM15 12v-2h3.418l-.285 2H15z" /><circle cx="8.5" cy="19.5" r="1.5" fill="#002FBA" /><circle cx="17.5" cy="19.5" r="1.5" fill="#002FBA" /></svg>
                </div>
                <span class="mx-2 align-middle Lexend-400" style="color:#002FBA; font-size:1.5rem">
                    Total Order
                </span>
                <h4 class="Lexend-400 pt-2" style="color:#002FBA">@orderCount</h4>
            </div>

        </div>

    </div>
    <div class="col-sm-12 col-md-12 col-lg-4 mb-4 mt-4 px-3">
        <div class="p-3 justify-content-center" style="background-color:#A78BFF; border:solid; border-width:1px; border-color:transparent; border-radius:7px;">
            <div class="text-center">
                <div>
                    <svg xmlns="http://www.w3.org/2000/svg" width="3rem" height="3rem" viewBox="0 0 256 256"><path fill="#2E00BA" d="M247.59 61.22L195.83 33a8 8 0 0 0-3.83-1h-32a8 8 0 0 0-8 8a24 24 0 0 1-48 0a8 8 0 0 0-8-8H64a8 8 0 0 0-3.84 1L8.41 61.22a15.76 15.76 0 0 0-6.59 21.26l19.27 36.81A16.37 16.37 0 0 0 35.67 128H56v80a16 16 0 0 0 16 16h112a16 16 0 0 0 16-16v-80h20.34a16.37 16.37 0 0 0 14.58-8.71l19.27-36.81a15.76 15.76 0 0 0-6.6-21.26ZM35.67 112a.62.62 0 0 1-.41-.13L16.09 75.26L56 53.48V112ZM184 208H72V48h16.8a40 40 0 0 0 78.38 0H184Zm36.75-96.14a.55.55 0 0 1-.41.14H200V53.48l39.92 21.78Z" /></svg>
                </div>
                <span class="mx-2 align-middle Lexend-400" style="color:#2E00BA; font-size:1.5rem">
                    Total Product
                </span>
                <h4 class="Lexend-400 pt-2" style="color:#2E00BA">@productCount</h4>
            </div>
        </div>

    </div>
    <div class="col-sm-12 col-md-12 col-lg-4 mb-4 mt-4 px-3" style="cursor:pointer" @onclick="ShowModal">
        <div class="p-3" style="background-color:#8BE2FF; border:solid; border-width:1px; border-color:transparent; border-radius:7px;">
            <div class="text-center">
                <div>
                    <svg xmlns="http://www.w3.org/2000/svg" width="3rem" height="3rem" viewBox="0 0 24 24"><path fill="#008CBA" d="M19 12.998h-6v6h-2v-6H5v-2h6v-6h2v6h6z" /></svg>
                </div>
                <span class="mx-2 align-middle Lexend-400" style="color:#008CBA; font-size:1.5rem">
                    Add new order
                </span>
                <h4 class="pt-2 Lexend-400" style="color:transparent">45</h4>
            </div>
        </div>
    </div>

</div>
<div class="row mt-5 mb-5 mx-0 border rounded" style="background-color:white; border-color:#C3C4C6">
    <div class="col-12 Lexend-400 table-overflow">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>#</th>
                    <th scope="col"><span class="oi oi-inbox p-1"></span>Order Id</th>
                    <th scope="col">Category</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Deleted</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var (detail, index) in Details.Select((item, index) => (item, Details.Count-index)))
                {
                    <tr>
                        <td>@index</td>
                        <td>@detail.Id</td>
                        <td>@detail.Category</td>
                        <td>@detail.RequestedAmount</td>
                        <td>
                            @if (detail.IsDeleted)
                            {
                                <span class="badge bg-danger">Deleted</span>
                            }
                            else
                            {
                                <span class="badge bg-success">Not Deleted</span>
                            }
                        </td>
                        <td>
                            @if (detail.IsDeleted)
                            {
                                <span class="oi oi-trash" @onclick="()=>ToggleHardDelete(detail.Id)"></span>
                            }
                            else
                            {
                                <span class="oi oi-delete" @onclick="()=>ToggleSoftDelete(detail.Id)"></span>
                            }
                        </td>
                        <td>
                            @if (detail.IsDeleted)
                            {
                                <span class="oi oi-loop-circular" @onclick="()=>ToggleUndoDelete(detail.Id)"></span>
                            }
                            else
                            {
                                <span class="oi oi-file" @onclick="()=>ExportExcel(detail.Id)"></span>
                            }
                        </td>
                        <td><span class="oi oi-chevron-bottom" @onclick="()=>ToggleAccordion(detail.Id.ToString())"></span></td>

                    </tr>

                <td colspan="7">
                    <div class="collapse @(detail.Id.ToString() == activeAccordionId ? "show" : "")">
                        <div class="card-body w-100">

                                @if (isLoading)
                                {
                                <p>API bekleniyor...</p>
                                }
                                else
                                {
                                <div class="row">
                                        @foreach (var item in products)
                                        {

                                        <div class="col-sm-12 col-md-4 mt-3">
                                            <div class="card">
                                                <img src=@item.Picture class="card-img-top mx-auto" alt=@item.Picture style="height:15rem; width:8rem;">
                                                <div class="card-body">
                                                    <p class="card-title">@item.Name</p>
                                                    <p class="card-text">@item.StoreName</p>
                                                    <p class="card-text">@item.Price ₺</p>
                                                </div>
                                            </div>
                                        </div>

                                        }
                                        @if (totalPages>1 && currentPage<=totalPages)
                                        {
                                        <div class="d-grid gap-2 mt-4 mb-4">
                                            <button type="button" class="btn navyBlue fw-bold" style="border:solid; border-color:#001C30;" @onclick="()=>showMore(currentPage, detail.Id.ToString())">
                                                Show More
                                            </button>
                                        </div>

                                        }


                                </div>
                                }
                        </div>
                    </div>

                </td>




                }
            </tbody>
        </table>
    </div>

</div>
<div class="slide-animation"></div>

@* Modal *@
<div class="full-page-overlay" style="visibility:@hiddenLayer">
</div>

@if (showModal)
{

    <div class="modal d-block slide-animation" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="d-inline-block rounded-circle" style="background-color:#8BA8FF">
                        <svg xmlns="http://www.w3.org/2000/svg" width="2rem" height="2rem" viewBox="0 0 256 256"><path fill="#002FBA" d="M128 24a104 104 0 1 0 104 104A104.11 104.11 0 0 0 128 24Zm0 192a88 88 0 1 1 88-88a88.1 88.1 0 0 1-88 88Zm16-40a8 8 0 0 1-8 8a16 16 0 0 1-16-16v-40a8 8 0 0 1 0-16a16 16 0 0 1 16 16v40a8 8 0 0 1 8 8Zm-32-92a12 12 0 1 1 12 12a12 12 0 0 1-12-12Z" /></svg>
                    </div>
                    <span class="modal-title align-middle mx-2 Lexend-400" style="display:inline-block; font-size:1.5rem">Generate Order</span>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=CloseModal></button>
                </div>
                <div class="modal-body" style="padding-left:2.5rem; padding-right:2.5rem">
                    <label for="selector" class="pb-2 mx-auto Lexend-400" style="padding-left:1rem">Please select the category you wish</label>

                    <select class="form-select mb-3 Lexend-400" style="margin-left:1rem;" @onchange="OnSelectionChange" name="selector" aria-label=".form-select-lg example">
                        <option value="0" selected>Kadın Pantolon</option>
                        <option value="1">Erkek Pantolon</option>
                        <option value="2">Kadın Gömlek</option>
                        <option value="3">Erkek Gömlek</option>
                        <option value="4">Kadın Şort</option>
                        <option value="5">Erkek Şort</option>
                        <option value="6">Kadın Etek</option>
                        <option value="7">Erkek Kravat</option>
                        <option value="8">Kadın Ceket</option>
                        <option value="9">Erkek Ceket</option>
                        <option value="10">Kadın Pijama</option>
                        <option value="11">Erkek Pijama</option>
                        <option value="12">Kadın Ayakkabı</option>
                        <option value="13">Erkek Ayakkabı</option>
                        <option value="14">Kadın Çanta</option>
                        <option value="15">Erkek Çanta</option>
                        <option value="16">Bilgisayar</option>
                        <option value="17">Telefon</option>
                        <option value="18">Televizyon</option>
                        <option value="19">Ağız Bakımı</option>
                        <option value="20">Vücut Bakımı</option>
                    </select>


                    <label for="requestedNumber" class="pb-2 mx-auto Lexend-400" style="padding-left:1rem">Please type requested number</label>
                    <input type="number" min=0 @bind="requestedAmount" @oninput="HandleRequestedAmount" name="requestedNumber" class="form-control Lexend-400" id="requestedNumber" style="margin-left:1rem;">
                    <br>
                    <p class="Lexend-400" style="padding-left:1rem;">Please chose what type of product are you looking for and enter how much of them you want.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick=CloseModal>Close</button>
                    <button type="button" class="btn btn-primary" @onclick=GenerateOrder>Generate Order</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private const string BASE_URL = "https://localhost:7090/api";
    private int orderCount;
    private int productCount;
    private List<OrderGetAllDto> Details = new List<OrderGetAllDto>();
    private List<ProductGetByOrderIdDto> products = new List<ProductGetByOrderIdDto>();
    private string token = "";
    private bool toasterNotification;

    //for Modal
    public string selectedOption = "0";
    public string requestedAmount = "0";
    private string hiddenLayer = "hidden";

    private void OnSelectionChange(ChangeEventArgs e)
    {
        selectedOption = e.Value.ToString();

    }
    private void HandleRequestedAmount(ChangeEventArgs e)
    {
        requestedAmount = e.Value.ToString();



    }

    private bool showModal = false;

    private async Task ShowModal()
    {
        await Task.Delay(250);
        showModal = true;
        hiddenLayer = "visible";

    }

    private void CloseModal()
    {
        showModal = false;
        hiddenLayer = "hidden";

    }

    private async Task GenerateOrder()
    {
        var dataTransferHubConnection = new HubConnectionBuilder()
        .WithUrl($"https://localhost:7090/Hubs/DataTransferHub")
        .WithAutomaticReconnect()
        .Build();

        await dataTransferHubConnection.StartAsync();

        await dataTransferHubConnection.InvokeAsync("SendDataToConsole", Convert.ToInt32(requestedAmount), Convert.ToInt32(selectedOption), token);
        if (toasterNotification)
        {
            toastService.ShowInfo("New Order Generated");
        }
        
        navigationManager.NavigateTo("/livetracking");

    }

    private async Task ToggleSoftDelete(Guid id)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var orderSoftDeleteCommandRequest = new OrderSoftDeleteCommand { Id=id };


        var orderSoftDeleteCommandResponse = await httpClient.PutAsJsonAsync($"{BASE_URL}/Orders/SoftDelete", orderSoftDeleteCommandRequest);

        var content = await orderSoftDeleteCommandResponse.Content.ReadAsStringAsync();
        Console.WriteLine(content);

        var updatedDetail = Details.FirstOrDefault(detail => detail.Id == id);
        if (updatedDetail != null)
        {
            updatedDetail.IsDeleted = true;
            StateHasChanged();
        }

    }

    private async Task ToggleUndoDelete(Guid id)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var orderUndoDeleteCommandRequest = new OrderUndoDeleteCommand { Id=id };


        var orderUndoDeleteCommandResponse = await httpClient.PutAsJsonAsync($"{BASE_URL}/Orders/UndoDelete", orderUndoDeleteCommandRequest);

        var content = await orderUndoDeleteCommandResponse.Content.ReadAsStringAsync();
        Console.WriteLine(content);

        var updatedDetail = Details.FirstOrDefault(detail => detail.Id == id);
        if (updatedDetail != null)
        {
            updatedDetail.IsDeleted = false;
            StateHasChanged();
        }

    }

    private async Task ToggleHardDelete(Guid id)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var orderHardDeleteCommandRequest = new HttpRequestMessage
            {
                Method = HttpMethod.Delete,
                RequestUri = new Uri($"{BASE_URL}/Orders/HardDelete"),
                Content = new StringContent(JsonConvert.SerializeObject(new OrderHardDeleteCommand { Id = id }), Encoding.UTF8, "application/json")
            };

        var orderHardDeleteCommandResponse = await httpClient.SendAsync(orderHardDeleteCommandRequest);

        var removeDetail = Details.FirstOrDefault(detail => detail.Id == id);
        if (removeDetail != null)
        {
            Details.Remove(removeDetail);
            StateHasChanged();
        }
        await ProductCount();
        orderCount = Details.Count;
    }

    private async Task ExportExcel(Guid id)
    {
        List<ProductGetByOrderIdDto> exportProducts = new List<ProductGetByOrderIdDto>();
        int pageCount = 1;
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var productGetByOrderIdResponse = await httpClient.GetAsync($"{BASE_URL}/Products/GetById?orderId={id}&pageNumber={pageCount}&pageSize=15");
        var content = await productGetByOrderIdResponse.Content.ReadAsStringAsync();
        var jsonContent = JsonConvert.DeserializeObject<PaginatedList<ProductGetByOrderIdDto>>(content);
        var jsonObject = JObject.Parse(content);
        pageCount = Convert.ToInt32(jsonObject["totalPages"]);
        var newProducts = jsonContent.Items.ToList();
        exportProducts.AddRange(newProducts); // Mevcut ürün listesine ekle
        for (int i = 2; i<=pageCount; i++)
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            productGetByOrderIdResponse = await httpClient.GetAsync($"{BASE_URL}/Products/GetById?orderId={id}&pageNumber={i}&pageSize=15");
            content = await productGetByOrderIdResponse.Content.ReadAsStringAsync();
            jsonContent = JsonConvert.DeserializeObject<PaginatedList<ProductGetByOrderIdDto>>(content);
            newProducts = jsonContent.Items.ToList();
            exportProducts.AddRange(newProducts);
        }


        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Sheet1");

            // Header section
            worksheet.Cell(1, 1).Value = "ProductName";
            worksheet.Cell(1, 2).Value = "StoreName"; 
            worksheet.Cell(1, 3).Value = "ProductPrice"; 
            worksheet.Cell(1, 4).Value = "ImageURL"; 

            var titleStyle = workbook.Style;
            titleStyle.Font.Bold = true;

            var titleRow = worksheet.Row(1);
            titleRow.Style = titleStyle;



            //product infos
            for (int row = 2; row <= exportProducts.Count+1; row++)
            {
                worksheet.Cell(row, 1).Value = exportProducts[row - 2].Name;
                worksheet.Cell(row, 2).Value = exportProducts[row - 2].StoreName;
                worksheet.Cell(row, 3).Value = exportProducts[row - 2].Price;
                worksheet.Cell(row, 4).Value = exportProducts[row - 2].Picture;

            }

            //table design
            var dataRange = worksheet.Range(worksheet.Cell(1, 1), worksheet.Cell(exportProducts.Count + 1, 4));
            var dataTable = dataRange.CreateTable();

            dataTable.Theme = XLTableTheme.TableStyleMedium9;

            worksheet.Columns().AdjustToContents();

            //exporting file
            using var stream = new MemoryStream();

            workbook.SaveAs(stream);
            stream.Seek(0, SeekOrigin.Begin);

            var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            var fileName = $"{id.ToString()}.xlsx";
            await using var ms = new MemoryStream(stream.ToArray());

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, ms.ToArray(), contentType);

        }

    }

    //for Accordion
    private string activeAccordionId = "-1";
    private bool isLoading = false;
    private bool HasNextPage = false;
    private int totalPages = 1;
    private int currentPage = 2;

    private async Task ToggleAccordion(string id)
    {
        if (activeAccordionId == id)
        {
            activeAccordionId = "-1";

        }
        else
        {
            isLoading = true;
            activeAccordionId = id;

            try
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var productGetByOrderIdResponse = await httpClient.GetAsync($"{BASE_URL}/Products/GetById?orderId={id}&pageNumber=1&pageSize=15");
                var content = await productGetByOrderIdResponse.Content.ReadAsStringAsync();
                var jsonContent = JsonConvert.DeserializeObject<PaginatedList<ProductGetByOrderIdDto>>(content);
                products = jsonContent.Items.ToList();
                var jsonObject = JObject.Parse(content);
                totalPages = Convert.ToInt32(jsonObject["totalPages"]);
                currentPage = 2;

            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }




        }
    }
    private async Task showMore(int currentStage, string id)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var productGetByOrderIdResponse = await httpClient.GetAsync($"{BASE_URL}/Products/GetById?orderId={id}&pageNumber={currentStage}&pageSize=15");
        var content = await productGetByOrderIdResponse.Content.ReadAsStringAsync();
        var jsonContent = JsonConvert.DeserializeObject<PaginatedList<ProductGetByOrderIdDto>>(content);
        var newProducts = jsonContent.Items.ToList();
        products.AddRange(newProducts);
        currentPage++;
        StateHasChanged();
    }

    private async Task ProductCount()
    {
        var productGetAllQueryRequest = new ProductGetAllQuery(null);

        var productGetAllQueryResponse = await SendHttpPostRequest<ProductGetAllQuery, object>(httpClient, $"{BASE_URL}/Products/GetAll", productGetAllQueryRequest, token);

        if (productGetAllQueryResponse is JArray responseProductArray)
        {

            productCount = responseProductArray.Count;

        }
    }

    private async Task OrderCount()
    {
        var orderGetAllQueryRequest = new OrderGetAllQuery(null);

        var orderGetAllQueryResponse = await SendHttpPostRequest<OrderGetAllQuery, object>(httpClient, $"{BASE_URL}/Orders/GetAll", orderGetAllQueryRequest, token);

        if (orderGetAllQueryResponse is JArray responseOrderArray)
        {

            orderCount = responseOrderArray.Count;
            foreach (var item in responseOrderArray)
            {
                Details.Add(item.ToObject<OrderGetAllDto>());

            }

        }
    }

    private async Task LoadUserSettingsAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await httpClient.GetFromJsonAsync<GetNotificationsDto>($"{BASE_URL}/Users/GetUserPreferences");
        toasterNotification = response.ToasterNotificationEnable;

    }

    protected override async Task OnInitializedAsync()
    {
        token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");


        await ProductCount();
        await OrderCount();
        await LoadUserSettingsAsync();
        await base.OnInitializedAsync();
    }



    public async Task<TResponse> SendHttpPostRequest<TRequest, TResponse>(HttpClient httpClient, string url, TRequest payload, string jwtToken)
    {
        var jsonPayload = JsonConvert.SerializeObject(payload);
        var httpContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

        // Authorization header
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);


        var response = await httpClient.PostAsync(url, httpContent);
        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadAsStringAsync();
        var responseObject = JsonConvert.DeserializeObject<TResponse>(jsonResponse);
        //Console.WriteLine($"Response: {responseObject}");

        return responseObject;
    }
}


<style>

    .card {
        height: 75vh;
        overflow-y: auto;
    }

    @@media (max-width: 576px) {
        /* Only sm screen settings */
        .card-title {
            font-size: 4vw; 
        }
    }

    .table-overflow {
        overflow: auto !important;
    }

    .navyBlue {
        background-color: #001C30;
        color: #f9fafb;
    }

        .navyBlue:hover {
            opacity: 0.85;
            color: white;
        }

    .Lexend-400 {
        font-family: 'Lexend', sans-serif;
        font-weight: 400;
    }

    .full-page-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(78, 78, 78, 0.8); 
        z-index: 999; /
    }

    .modal-header {
        border-bottom: none !important;
    }

    .slide-animation {
        animation: slideDown 0.7s ease-in-out;
    }

    @@keyframes slideDown {
        0% {
            transform: translateY(-100%);
        }

        100% {
            transform: translateY(0);
        }
    }

</style>
